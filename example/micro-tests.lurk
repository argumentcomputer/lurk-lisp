!(:load "micro.lurk")
!(:load "micro-progs.lurk")

!(:assert-eq '(((((VAR DUMMY))) . 0)) ((== 5 5) empty-state))

!(:assert-eq '(((((VAR . 0) . 5) ((VAR DUMMY))) . 1)) ((call/fresh (lambda (q) (== q 5))) empty-state))

!(:assert-eq' (((((VAR . 1) . 5) ((VAR . 0) . 7) ((VAR DUMMY))) . 2)
               ((((VAR . 1) . 6) ((VAR . 0) . 7) ((VAR DUMMY))) . 2))

              (take-all (a-and-b empty-state)))

!(:assert-eq '(((((VAR . 0) . 5) ((VAR DUMMY))) . 1)) (take 1 ((call/fresh (lambda (q) (fives q))) empty-state)))

!(:assert-eq '((((VAR . 2) B) ((VAR . 1)) ((VAR . 0) . A) ((VAR DUMMY))) . 3) (car (((appendo '(a) '(b) '(a b)) empty-state))))

!(:assert-eq '((((VAR . 2) B) ((VAR . 1)) ((VAR . 0) . A) ((VAR DUMMY))) . 3) (car (((appendo2 '(a) '(b) '(a b)) empty-state))))

!(:assert-eq '(((((VAR . 0) (VAR . 1) (VAR . 2) (VAR . 3)) ((VAR . 2) VAR . 3)
                 ((VAR . 1)) ((VAR DUMMY)))
                . 4)
               ((((VAR . 0) (VAR . 1) (VAR . 2) (VAR . 3)) ((VAR . 2) VAR . 6)
                 ((VAR . 5)) ((VAR . 3) (VAR . 4) VAR . 6) ((VAR . 1) (VAR . 4) VAR . 5)
                 ((VAR DUMMY)))
                . 7))
             (take 2 (call-appendo empty-state)))

!(:assert-eq '(((((VAR . 0) (VAR . 1) (VAR . 2) (VAR . 3)) ((VAR . 2) VAR . 3)
                 ((VAR . 1)) ((VAR DUMMY)))
                . 4)
               ((((VAR . 0) (VAR . 1) (VAR . 2) (VAR . 3)) ((VAR . 3) (VAR . 4) VAR . 6)
                 ((VAR . 2) VAR . 6) ((VAR . 5)) ((VAR . 1) (VAR . 4) VAR . 5)
                 ((VAR DUMMY)))
                . 7))
             (take 2 (call-appendo2 empty-state)))
